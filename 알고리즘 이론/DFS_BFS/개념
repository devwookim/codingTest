탐색 => 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정

대표적인 탐색 알고리즘 : DFS, BFS

=> 스택과 큐에 대한 이해가 전제 + 재귀함수
	

스택 => 박스 쌓기에 비유 => 선입후출, 후입선출 구조 => 파이썬에서는 list [] 로 이미 구현되어있다.

ex) stack = [] , stack.append(값), stack.pop()
ex) print(stack[::-1]) => 최상단 원소부터 출력


큐 => 대기 줄에 비유 => 먼저 온 사람이 먼저 들어간다 => 선입선출 구조 => 파이썬으로 que 구현 시 => from collections import deque

ex) queue = deque()
	queue.append(값)
	queue.popleft()
	queue.reverse() => 역순
	
재귀함수 => 자기 자신을 다시 호출하는 함수 => return으로 1 or 자신


DFS => Depth-First-Search => 깊이 우선 탐색(스택)

그래프를 먼저 알아야됨 => 그래프는 노드(도시)와 간선(도로)으로 표현, 인접하다 => 두 노드가 간선으로 연결되어 있다

파이썬으로 인접 리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 된다는 점을 기억하자

동작과정 
=> 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
=> 2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
=> 3. 2과정을 반복한다.


<코드>

#DFS 메서드 정의
def dfs(graph,v,visited) :
    #현재 노드를 방문 처리
    visited[v] = True
    print(v,end='')

    #현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

#각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

#정의된 DFS 함수 호출
dfs(graph, 1, visited)



BFS => 너비(Breadth) 우선 탐색 => 가까운 노드부터 탐색하는 알고리즘(큐)

동작과정
=> 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
=> 2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리 한다
=> 3. 2반복

<코드>

from collections import deque

#BFS 메서드 정의

def bfs(graph, start, visited):
    #큐(queue) 구현읠 위해 deque 라이브러리 사용
    queue = deque([start])
    #현재 노드를 방문 처리
    visited[start] = True

    #큐가 빌 때까지 반복
    while queue:
        #큐애서 하나의 원소를 뽑아 출력
        v = queue.popleft()
        print(v,end=' ')
        #해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

#각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

#각 노드가 방문된 정보를 리스트 자료형으료 표현(1차원 리스트)
visited = [False]*9

#정의된 BFS 함수 호출
bfs(graph,1,visited)
